Project: Configurable PDF Report Generation System
Objective: Build a full-stack web application with user authentication and a highly flexible, configuration-driven PDF report generation system. The system must generate different types of reports from pre-existing assessment data without requiring code modifications for new assessment types.
Step 1: Project Setup and Data Structure
1.1. Initialize the Project:
Create a new project directory.
Set up a Node.js/Express backend (using TypeScript is strongly recommended).
Set up a React.js frontend with Vite or Create-React-App.
Install and configure Tailwind CSS for styling.
1.2. Create the Central Data Store (data.ts):
Create a file /backend/src/data.ts.
This file will act as your in-memory "database". It should export a constant assessmentData, which is an array of objects.
Step 2: Build the User Authentication System
2.1. Backend API (Express + TypeScript):
Models: Create a User model (interface) with id, email, password (hashed!), name, etc.
Data Store: For simplicity, store users in an array in a users.ts file. In a real application, this would be a database.
Endpoints:
POST /api/auth/register: Validate input (email, password), hash the password (using bcryptjs), save the new user, and return a JWT token (using jsonwebtoken).
POST /api/auth/login: Find user by email, compare hashed password with bcryptjs.compare, if valid, return a JWT token.
Middleware: Create an authenticateToken middleware to protect API routes. It verifies the JWT sent in the Authorization: Bearer <token> header.
2.2. Frontend (React + Tailwind):
Components:
LoginForm.jsx: A form with email and password fields. On submit, calls /api/auth/login, stores the received JWT (e.g., in localStorage or context), and redirects.
RegisterForm.jsx: A form with name, email, password, and confirm password fields. Calls /api/auth/register.
State Management: Use React Context or a state management library (like Redux Toolkit) to manage the global user authentication state (isLoggedIn, user data).
Routing: Use React Router to protect routes. Wrap protected pages (like the report generator) in a PrivateRoute component that checks isLoggedIn and redirects to login if not authenticated.
Step 3: Design the Configuration System (The Core Challenge)
3.1. Create the Configuration File (reportConfig.ts):
This is the most critical part. Create /backend/src/reportConfig.ts.
It should be an object or a map keyed by assessment_id.
Adding a new assessment type (e.g., emotional_intelligence) only requires adding a new entry to this reportConfig object. No code changes are needed.
Step 4: Implement the PDF Generation API Endpoint
4.1. Create the Endpoint (/generate-report):
Route: GET /api/generate-report?session_id=session_001
Middleware: Protect this route with the authenticateToken middleware.
Logic:
Extract session_id from the query parameters.
Find the assessment record in assessmentData from data.ts using the session_id.
If not found, return a 404 error.
Get the assessment_id from the record.
Look up the configuration for this assessment_id in reportConfig.
Use the configuration:
Execute each value function in the sections array, passing the found assessment data. This will extract all the necessary data for the report.
Apply the classifier function if it exists.
Render HTML: Use a templating engine like Handlebars or EJS to inject the processed section data into the HTML template file specified in the config (template property).
Generate PDF: Use Puppeteer to launch a headless browser, navigate to a page with the rendered HTML, and generate a PDF (page.pdf()).
Save File: Save the PDF buffer to the local filesystem (e.g., ./reports/report_<session_id>.pdf). Ensure the reports/ directory exists.
Response: Send a JSON response: { success: true, message: 'Report generated successfully', path: '/path/to/file.pdf' }. Handle errors appropriately.
Step 5: Create HTML Templates
Create a /backend/templates/ directory.
Create template files (e.g., leadership.html, cognitive.html).
These are standard HTML files styled with Tailwind CSS CDN or inline styles.
They should contain placeholders for the dynamic data. The templating engine (e.g., Handlebars) will replace these.
Step 6: (Optional) Frontend Testing Interface
Create a simple page in the React app, only accessible after login.
It could contain:
A text input to enter a session_id.
A button "Generate Report" that calls the GET /api/generate-report?session_id=... endpoint.
It displays the success/error message from the API response.
A link to download the generated PDF (this would require another endpoint to serve static files from the reports/ directory, e.g., app.use('/reports', express.static('reports'))).
Summary of Files to Create:
Backend (/backend/src/):
server.ts (Main app file, routes)
data.ts (Assessment data "database")
users.ts (User data "database")
reportConfig.ts (The flexible configuration heart of the system)
authMiddleware.ts
/templates/leadership.html (HTML templates)
/templates/cognitive.html
Frontend (/frontend/src/):
LoginForm.jsx
RegisterForm.jsx
AuthContext.jsx (or similar)
ReportGenerator.jsx (Testing interface)
This detailed plan provides a clear, step-by-step blueprint for building a robust, flexible, and configurable PDF reporting system as specified. The key innovation is the reportConfig.ts file, which completely decouples the reporting logic from the data structure, allowing for limitless expansion through configuration alone.
This detailed plan provides a clear, step-by-step blueprint for building a robust, flexible, and configurable PDF reporting system as specified. The key innovation is the reportConfig.ts file, which completely decouples the reporting logic from the data structure, allowing for limitless expansion through configuration alone.
Sample Dataset 1: Health & Fitness Assessment (as_hr_02)
{
   "session_id": "session_001",
   "accuracy": 80,
   "assessmentResultId": "-OK76ANqAq9pvKSl3ZoN",
   "assessment_id": "as_hr_02",
   "bodyCompositionData": {
      "AGR": "1.687",
      "Age": "43",
      "BFC": "29.754",
      "BMI": "33.145",
      "BMR": "2054.217",
      "FM": "33.027",
      "FMI": "9.862",
      "HeightM": "184.091",
      "LM": "77.973",
      "LMI": "23.283",
      "M_Age": "48",
      "WHGR": "0.564",
      "WHR": "0.926"
   },
   "exercises": [
      {
         "analysisList": [
            "Shoulders slightly uneven, affecting posture balance.",
            "Head alignment slightly off-center.",
            "Feet aligned properly under shoulders.",
            "Arms hang naturally by the sides."
         ],
         "analysisScore": 75,
         "assignReps": 1,
         "correctReps": 1,
         "id": 73,
         "name": "Frontal body view",
         "setList": [
            {
               "additionalFields": [
                  {
                     "fieldName": "accuracy",
                     "fieldText": "Score",
                     "fieldUnit": "%",
                     "fieldValue": "0.0",
                     "shouldDisplay": false
                  }
               ],
               "correctReps": 1,
               "incorrectReps": 0,
               "isSkipped": false,
               "time": 10,
               "totalReps": 1
            }
         ],
         "side": "left",
         "tipsList": [
            "Practice shoulder alignment exercises daily.",
            "Focus on maintaining head center alignment."
         ],
         "totalReps": 1,
         "totalSets": 1,
         "variationId": "",
         "variationName": ""
      },
      {
         "analysisList": [
            "Head leans slightly forward.",
            "Spine shows slight curvature at neck.",
            "Hips aligned over ankles correctly.",
            "Knees are slightly bent, affecting stance."
         ],
         "analysisScore": 70,
         "assignReps": 1,
         "correctReps": 1,
         "id": 74,
         "name": "Side body view",
         "setList": [
            {
               "additionalFields": [
                  {
                     "fieldName": "accuracy",
                     "fieldText": "Score",
                     "fieldUnit": "%",
                     "fieldValue": "0.0",
                     "shouldDisplay": false
                  }
               ],
               "correctReps": 1,
               "incorrectReps": 0,
               "isSkipped": false,
               "time": 22,
               "totalReps": 1
            }
         ],
         "side": "left",
         "tipsList": [
            "Engage in neck strengthening exercises.",
            "Consciously practice standing with straight knees."
         ],
         "totalReps": 1,
         "totalSets": 1,
         "variationId": "",
         "variationName": ""
      },
      {
         "assignReps": 10,
         "correctReps": 1,
         "id": 235,
         "name": "Jog test",
         "setList": [
            {
               "additionalFields": [
                  {
                     "fieldName": "accuracy",
                     "fieldText": "Score",
                     "fieldUnit": "%",
                     "fieldValue": "99.17062",
                     "shouldDisplay": false
                  }
               ],
               "correctReps": 1,
               "incorrectReps": 0,
               "isSkipped": false,
               "time": 61,
               "totalReps": 1
            }
         ],
         "side": "left",
         "totalReps": 1,
         "totalSets": 1,
         "variationId": "",
         "variationName": ""
      },
      {
         "assignReps": 45,
         "correctReps": 42,
         "id": 259,
         "name": "Squat",
         "setList": [
            {
               "additionalFields": [
                  {
                     "fieldName": "accuracy",
                     "fieldText": "Score",
                     "fieldUnit": "%",
                     "fieldValue": "93.333336",
                     "shouldDisplay": false
                  },
                  {
                     "fieldName": "reps",
                     "fieldText": "Reps",
                     "fieldUnit": "reps",
                     "fieldValue": "42",
                     "shouldDisplay": true
                  }
               ],
               "correctReps": 42,
               "incorrectReps": 0,
               "isSkipped": false,
               "time": 90,
               "totalReps": 42
            }
         ],
         "side": "left",
         "totalReps": 42,
         "totalSets": 1,
         "variationId": "",
         "variationName": ""
      },
      {
         "assignReps": 1,
         "correctReps": 1,
         "id": 281,
         "name": "Stand and reach",
         "setList": [
            {
               "additionalFields": [
                  {
                     "fieldName": "accuracy",
                     "fieldText": "Score",
                     "fieldUnit": "%",
                     "fieldValue": "75.11575",
                     "shouldDisplay": false
                  },
                  {
                     "fieldName": "Distance",
                     "fieldText": "Distance",
                     "fieldUnit": "CM",
                     "fieldValue": "45.538174",
                     "shouldDisplay": false
                  }
               ],
               "correctReps": 1,
               "incorrectReps": 0,
               "isSkipped": false,
               "time": 10,
               "totalReps": 1
            }
         ],
         "side": "left",
         "totalReps": 1,
         "totalSets": 1,
         "variationId": "",
         "variationName": ""
      }
   ],
   "finalPainScore": "pending",
   "gender": "male",
   "height": 183,
   "initialPainScore": 0,
   "initialVAS": 0,
   "isLandmarksUploaded": false,
   "laterPainScore": "pending",
   "reportLink": "https://storage.googleapis.com/allycare-prod.appspot.com/fWOr2t8S94e0BIIlcUKkh7m629d2/GthcXa9eHlfnU2BGIIerrAoDZMH2/-OK76AihRKe9xdHFWjuY.pdf?GoogleAccessId=firebase-adminsdk-y618w%40allycare-prod.iam.gserviceaccount.com&Expires=16447017600&Signature=pPula7IsDbCSgkrgINHibG7dtPcToWZ%2BmzLfi82QUnbwIYMIeycm%2BFdSB1IrLv%2FLgra3X2HaGT3OcvmEm0PyTNQ%2Ft%2FYjZWWKEwVAGPBcdibR1irczpl47UdFpFGxLWLswKPooopFj2EHrvvnU88Umgr2vWjk2JIHVr6IMgtaIkTCC9nWXCJ3Zw2NqlIN8bbr4s%2BQk8KIov8vWEplb5neT56%2F%2FGC8W66bThKW5otWsTMC4GB9SFrnFheivFu8rPbGnnTJOilpY9dtKj6pOPr6K%2F50oF7y2pfjCuQILFX9JzCMiVZwam6EcWHileYEPzZdqeE%2FspOYBzwN9%2FC3RE6%2BJQ%3D%3D",
   "reportsDataId": "-OK76BS5l9VB-QMbIOEo",
   "timeElapsed": 193,
   "timestamp": 1740671597044,
   "vitalsMap": {
      "api_key": "CNCPg45zbVxGlB7r74xb",
      "employee_id": "SCAN_USER",
      "entry_time": "2025-02-27 15:53:11.840940+00:00",
      "health_risk_score": 16,
      "metadata": {
         "cardiovascular": {
            "cardiac_out": 6.3,
            "map": 96,
            "prq": 3.57
         },
         "fps": 114,
         "glucose_info": {
            "diabetes_control_score": 57.5,
            "hba1c": 5.2,
            "status": "beta"
         },
         "heart_scores": {
            "HRMax": 191,
            "HRR": "116",
            "THRR": "145 - 191",
            "heart_utilized": "40",
            "pNN50_per": 47.37,
            "rmssd": 23.64,
            "sdnn": 45.88,
            "stress_index": 1.4,
            "zone_details": {
               "highZoneRange": 94,
               "lowZoneRange": "--",
               "zone": "Rest"
            }
         },
         "physiological_scores": {
            "bloodvolume": "6354.9",
            "bmi": "33.15",
            "bodyfat": "33.36",
            "cal_carb": "93.51",
            "cal_fat": "6.49",
            "dob": "1999-06-05",
            "gender": "male",
            "height": "183.0",
            "intensity": "Hard",
            "tbw": "57.13",
            "tbwp": "51.47",
            "vo2max": "79.83",
            "weight": "111.0"
         }
      },
      "posture": "exercising",
      "scan_completion_time": "2025-02-27T15:53:16.002564+00:00",
      "scan_id": "069da947-4efd-4c31-8169-c02e4de8f639",
      "statusCode": 200,
      "vitals": {
         "bp_dia": 82,
         "bp_sys": 124,
         "heart_rate": 75,
         "oxy_sat_prcnt": 96,
         "resp_rate": 21
      },
      "wellness_score": 84
   },
   "weight": 111
}

Sample Dataset 2: Cardiac Assessment (as_card_01)
{
  "session_id": "session_002",
  "accuracy": 17,
  "assessmentResultId": "-OTafA4SqUgE6Y5xrqiI",
  "assessment_id": "as_card_01",
  "bodyCompositionData": {
    "AGR": "0.90",
    "BFC": "-0.90",
    "BMI": "9.51",
    "BMR": "995.39",
    "FM": "-0.18",
    "FMI": "-0.09",
    "LM": "20.18",
    "LMI": "9.60",
    "M_Age": "15",
    "WHGR": "0.37",
    "WHR": "1.01"
  },
  "exercises": [
    {
      "assignReps": 1,
      "correctReps": 1,
      "id": 73,
      "name": "Frontal body view",
      "setList": [
        {
          "additionalFields": [
            {
              "fieldName": "accuracy",
              "fieldText": "Score",
              "fieldUnit": "%",
              "fieldValue": "0",
              "shouldDisplay": false
            }
          ],
          "correctReps": 1,
          "incorrectReps": 0,
          "isSkipped": false,
          "time": 10,
          "totalReps": 1
        }
      ],
      "side": "left",
      "totalReps": 1,
      "totalSets": 1,
      "variationId": "\"\"",
      "variationName": "\"\""
    },
    {
      "assignReps": 1,
      "correctReps": 1,
      "id": 74,
      "name": "Side body view",
      "setList": [
        {
          "additionalFields": [
            {
              "fieldName": "accuracy",
              "fieldText": "Score",
              "fieldUnit": "%",
              "fieldValue": "0",
              "shouldDisplay": false
            }
          ],
          "correctReps": 1,
          "incorrectReps": 0,
          "isSkipped": false,
          "time": 10,
          "totalReps": 1
        }
      ],
      "side": "left",
      "totalReps": 1,
      "totalSets": 1,
      "variationId": "\"\"",
      "variationName": "\"\""
    },
    {
      "assignReps": 10,
      "correctReps": 0,
      "id": 235,
      "name": "Jog test",
      "setList": [
        {
          "additionalFields": [
            {
              "fieldName": "accuracy",
              "fieldText": "Score",
              "fieldUnit": "%",
              "fieldValue": "15.164222764530614",
              "shouldDisplay": false
            }
          ],
          "correctReps": 0,
          "incorrectReps": 0,
          "isSkipped": false,
          "time": 47,
          "totalReps": 0
        }
      ],
      "side": "left",
      "totalReps": 0,
      "totalSets": 1,
      "variationId": "\"\"",
      "variationName": "\"\""
    }
  ],
  "finalPainScore": "pending",
  "gender": "male",
  "height": 145,
  "initialPainScore": 0,
  "initialVAS": 0,
  "isLandmarksUploaded": false,
  "laterPainScore": "pending",
  "reportLink": "https://firebasestorage.googleapis.com/v0/b/rootallyai.appspot.com/o/reports%2FW2g8IThefhPc3SNAv46x2TT3hOB3%2FzHSezoe7w3exoakaC4dGGMneB0u2%2Fgugh_7713.pdf?alt=media&token=388e74f0-616b-43b5-8d14-0424b123d5c8",
  "timeElapsed": 67,
  "timestamp": 1750848025493,
  "vitalsMap": {
    "api_key": "CNCPg45zbVxGlB7r74xb",
    "employee_id": "SCAN_USER",
    "entry_time": "2024-09-26 07:26:15.188795+00:00",
    "health_risk_score": 16,
    "metadata": {
      "cardiovascular": {
        "cardiac_out": 5.68,
        "map": 95.33,
        "prq": 3.47
      },
      "fps": 114,
      "glucose_info": {
        "diabetes_control_score": 77.5,
        "hba1c": 5.2,
        "status": "beta"
      },
      "heart_scores": {
        "HRMax": 191,
        "HRR": "125",
        "THRR": "< 90",
        "heart_utilized": "45",
        "pNN50_per": 37.66,
        "rmssd": 27.12,
        "sdnn": 50.81,
        "stress_index": 1.6,
        "zone_details": {
          "highZoneRange": 94,
          "lowZoneRange": "--",
          "zone": "Rest"
        }
      },
      "physiological_scores": {
        "bloodvolume": "5414.04",
        "bmi": "26.23",
        "bodyfat": "23.4",
        "cal_carb": "--",
        "cal_fat": "--",
        "dob": "1999-06-05",
        "gender": "male",
        "height": "180.0",
        "intensity": "Very Light",
        "tbw": "48.07",
        "tbwp": "56.55",
        "vo2max": "44.08",
        "weight": "85.0"
      }
    },
    "posture": "resting",
    "scan_completion_time": "2024-09-26T07:26:16.821174+00:00",
    "scan_id": "ce310698-d79a-4cd2-9df7-60de836d2786",
    "statusCode": 200,
    "user_id": "1abc0416-e7bd-47b3-9098-696d35f79408",
    "vitals": {
      "bp_dia": 75,
      "bp_sys": 110,
      "heart_rate": 66,
      "oxy_sat_prcnt": 95,
      "resp_rate": 19
    },
    "wellness_score": 84
  },
  "weight": 20
}Understanding the Flexibility Requirements
Assessment Type Configuration
For assessment_id: "as_hr_02" (Health & Fitness Assessment): Shows sections like 'Key Body Vitals', 'Heart Health', 'Stress Level', 'Fitness Levels', 'Posture', 'Body Composition'.
For assessment_id: "as_card_01" (Cardiac Assessment): Shows only 'Key Body Vitals', 'Cardiovascular Endurance', 'Body Composition'.
Dynamic Data Field Mapping Examples
Overall Health Score: Shows the accuracy field from the top level of the JSON data.
Heart Rate (in Key Body Vitals): Shows vitalsMap.vitals.heart_rate.
Cardiovascular Endurance (in Fitness Levels): Shows the time field from setList of exercise with id: 235 in the exercises array.
BMI (in Body Composition): Shows bodyCompositionData.BMI.
Blood Pressure Systolic: Shows vitalsMap.vitals.bp_sys.
Blood Pressure Diastolic: Shows vitalsMap.vitals.bp_dia.
This flexibility must be achieved through configuration, not code changes.